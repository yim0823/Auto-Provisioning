plugins {
    id 'org.asciidoctor.convert' version '1.5.3'
    id 'org.springframework.boot' version '2.1.6.RELEASE'
    id 'java'
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id "com.google.cloud.tools.jib" version "1.5.0"
}

group = 'com.bespinglobal.dcos.ap'
version = '0.0.1'
sourceCompatibility = '11'

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
//    compile.exclude module: "HikariCP"
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    dependsOn test
    sourceDir 'src/docs/asciidoc'
    inputs.dir snippetsDir
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/asciidoc/html5/")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

jib {
    allowInsecureRegistries = true
    from {
        image = "hirokimatsumoto/alpine-openjdk-11"
    }
    to {
        image = "${project.name}:${version}".toLowerCase()
        tags = ["0.0.1"]
    }
    container {
        creationTime = "USE_CURRENT_TIMESTAMP"

        // Set JVM options.
        jvmFlags = ['-XX:+HeapDumpOnOutOfMemoryError', '-XX:HeapDumpPath=/opt/apps/hprof/heapdump.hprof', '-Xms1g']

        // Additional program arguments appended to command to start the container
        args = ['-Dserver.port=8080', '--spring.config.name=application', '--spring.datasource.url=jdbc:mariadb://10.100.61.108:3306/dcos?createDatabaseIfNotExist=true&useMysqlMetadata=true']

        // Expose different port.
        ports = ['30001']

        // Add labels.
        labels = [maintainer: 'dcos', subtainer: 'auto-provisioning-api']
    }
}

// gradlew clean bootWar jibDockerBuild dockerLocalRun --stacktrace
task dockerLocalRun() {
    doLast {
        def imageName = "${project.name}:${project.version}".toLowerCase()
        def containerName = "${project.name}".toLowerCase()

        println("Checking for the container, " + containerName)
        Process process = "docker stop ${containerName}".split(' ').execute()
        def out = new StringBuilder()
        def err = new StringBuilder()

        process.consumeProcessOutput( out, err )
        process.waitFor()

        if (err.size() > 0) {
            println "There is no container " + containerName + ", message: " + err
            println "Therefore we will run a new container...."
            exec { commandLine "docker run -d -p 80:8080 --name ${containerName} ${imageName}".split(' ') }
        } else {
            println("Stoping the previous container, " + containerName)
            exec { commandLine "docker stop ${containerName}".split(' ') }

            println("Removing the previous container, " + containerName)
            exec { commandLine "docker rm ${containerName}".split(' ') }

            println("Starting the new container, " + containerName)
            exec { commandLine "docker run -d -p 80:8080 --name ${containerName} ${imageName}".split(' ') }
        }

        println('\nComplete docker build.')
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-groovy-templates'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Undertow
    implementation 'org.springframework.boot:spring-boot-starter-undertow'

    // Netty
//    implementation 'io.netty:netty-all:4.1.38.Final'

    // Apache HttpClient
    implementation 'org.apache.httpcomponents:httpclient:4.5.9'

    // Http Asyn Client
    implementation 'org.apache.httpcomponents:httpasyncclient:4.1.4'

    // AccessLog Filter
    implementation 'org.apache.commons:commons-lang3:3.9'

    // AOP
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // MariaDB
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.4.1'
    implementation 'mysql:mysql-connector-java:8.0.16'

    // DBCP
    implementation 'org.apache.tomcat:tomcat-jdbc:9.0.22'
//    implementation 'org.springframework.boot:spring-boot-starter-jdbc:2.1.6.RELEASE'

    // Envers
    implementation 'org.springframework.data:spring-data-envers:2.1.8.RELEASE'
    implementation 'org.glassfish.jaxb:jaxb-runtime'

    // Zipkin - Log Tracer
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth:2.1.2.RELEASE'
    implementation 'org.springframework.cloud:spring-cloud-starter-zipkin:2.1.2.RELEASE'
    implementation 'org.springframework.kafka:spring-kafka:2.2.7.RELEASE'

    // Flyway - version control for database
    implementation 'org.flywaydb:flyway-core:5.2.4'

    // For parsing Json
    implementation 'com.jayway.jsonpath:json-path:2.4.0'
    //  - For serializing LocalDate, LocalTime, LocalDateTime
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.3.RELEASE'
}
